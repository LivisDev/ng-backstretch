{"version":3,"file":"ng-backstretch.min.js","sources":["../src/ng-backstretch.js"],"names":["angular","module","directive","$window","restrict","scope","link","element","attributes","styles","wrapper","left","top","overflow","margin","padding","height","width","zIndex","position","image","display","border","maxHeight","maxWidth","css","src","backgroundUrl","append","load","ratio","this","resize","background_offset","background_css","root_width","offsetWidth","background_width","root_height","offsetHeight","background_height","bind"],"mappings":"AAAAA,QAAQC,OAAO,qBAEfC,UAAU,eAAgB,UAAW,OAAQ,SAASC,GACpD,OACEC,SAAU,IACVC,SACAC,KAAM,SAASD,EAAOE,EAASC,GAG3B,GAAIC,IACFC,SACEC,KAAM,EACNC,IAAK,EACLC,SAAU,SACVC,OAAQ,EACRC,QAAS,EACTC,OAAQ,OACRC,MAAO,OACPC,OAAQ,QACRC,SAAU,YAEZC,OACED,SAAU,WACVE,QAAS,OACTP,OAAQ,EACRC,QAAS,EACTO,OAAQ,OACRL,MAAO,OACPD,OAAQ,OACRO,UAAW,OACXC,SAAU,OACVN,OAAQ,SAKZb,GAAMK,QAAUV,QAAQO,QAAQ,mCAChCF,EAAMK,QAAQe,IAAIhB,EAAOC,SAGzBL,EAAMe,MAAQpB,QAAQO,QAAQ,SAC9BF,EAAMe,MAAM,GAAGM,IAAMlB,EAAWmB,cAChCtB,EAAMe,MAAMK,IAAIhB,EAAOW,OAGvBf,EAAMK,QAAQkB,OAAOvB,EAAMe,OAC3Bb,EAAQqB,OAAOvB,EAAMK,SAErBL,EAAMwB,KAAO,WAEXxB,EAAMyB,MAAQC,KAAKd,MAAQc,KAAKf,OAGhCX,EAAMe,MAAMK,KAAKJ,QAAQ,UAGzBhB,EAAM2B,UAGR3B,EAAM2B,OAAS,WAGb,GASIC,GATAC,GAAkBvB,KAAM,EAAGC,IAAK,EAAGK,MAAO,OAAQD,OAAQ,QAG1DmB,EAAa5B,EAAQ,GAAG6B,cACxBC,EAAmBF,EAEnBG,EAAc/B,EAAQ,GAAGgC,eACzBC,EAAoBH,EAAmBhC,EAAMyB,KAK7CU,IAAqBF,GACvBL,GAAqBO,EAAoBF,GAAe,EACxDJ,EAAetB,IAAM,IAAMqB,EAAoB,OAG/CO,EAAoBF,EACpBD,EAAmBG,EAAoBnC,EAAMyB,MAC7CG,GAAqBI,EAAmBF,GAAc,EAEtDD,EAAevB,KAAO,IAAMsB,EAAoB,MAIlDC,EAAejB,MAAQoB,EACvBH,EAAelB,OAASwB,EAGxBnC,EAAMK,QAAQe,KAAKR,MAAOkB,EAAYnB,OAAQsB,IAC9CjC,EAAMe,MAAMK,IAAIS,IAIpB7B,EAAMe,MAAMqB,KAAK,OAAQpC,EAAMwB,MAG/B7B,QAAQO,QAAQJ,GAASsC,KAAK,SAAUpC,EAAM2B","sourcesContent":["angular.module('ng-backstretch', []).\n\ndirective('backstretch', ['$window', '$log', function($window, $log) {\n  return {\n    restrict: 'A',\n    scope: {},\n    link: function(scope, element, attributes) {\n\n        // set some default styles for the wrapper and image\n        var styles = {\n          wrapper: {\n            left: 0,\n            top: 0,\n            overflow: 'hidden',\n            margin: 0,\n            padding: 0,\n            height: '100%',\n            width: '100%',\n            zIndex: -999998,\n            position: 'absolute',\n          },\n          image: {\n            position: 'absolute',\n            display: 'none',\n            margin: 0,\n            padding: 0,\n            border: 'none',\n            width: 'auto',\n            height: 'auto',\n            maxHeight: 'none',\n            maxWidth: 'none',\n            zIndex: -999999,\n          }\n        };\n\n        // create the scope.wrapper element\n        scope.wrapper = angular.element('<div class=\"backstretch\"></div>');\n        scope.wrapper.css(styles.wrapper);\n\n        // create the scope.image element\n        scope.image = angular.element('<img>');\n        scope.image[0].src = attributes.backgroundUrl;\n        scope.image.css(styles.image);\n\n        // append things to the element requesting element functionality\n        scope.wrapper.append(scope.image);\n        element.append(scope.wrapper);\n\n        scope.load = function(e) {          \n          // figure out what the width:height ratio is\n          scope.ratio = this.width / this.height;\n\n          // show the image since it's finished loading\n          scope.image.css({display:'block'});\n\n          // perform an initial sizing\n          scope.resize();\n        };\n\n        scope.resize = function(e) {\n\n          // set some default css\n          var background_css = {left: 0, top: 0, width: 'auto', height: 'auto'};\n\n          // set some initial calculations\n          var root_width = element[0].offsetWidth(),\n              background_width = root_width,\n\n              root_height = element[0].offsetHeight(),\n              background_height = background_width / scope.ratio,\n\n              background_offset;\n\n          // make adjustments based on image ratio\n          if (background_height >= root_height) {\n            background_offset = (background_height - root_height) / 2;\n            background_css.top = '-' + background_offset + 'px';\n\n          } else {\n            background_height = root_height;\n            background_width = background_height * scope.ratio;\n            background_offset = (background_width - root_width) / 2;\n\n            background_css.left = '-' + background_offset + 'px';\n          }\n\n          // set the css for the width and height\n          background_css.width = background_width;\n          background_css.height = background_height;\n\n          // apply the appropriate styles to the wrapper and image\n          scope.wrapper.css({width: root_width, height: root_height});\n          scope.image.css(background_css);\n        };\n\n      // don't do anything until the image has finished loading\n      scope.image.bind('load', scope.load);\n\n      // make sure to update the image sizes when the page scales/changes\n      angular.element($window).bind('resize', scope.resize);\n    }\n  };\n}]);\n"]}